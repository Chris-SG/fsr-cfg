{"mappings":"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","sources":["src/index.js","src/App.tsx","src/util/serial.ts"],"sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nconst container = document.getElementById('app-root');\nconst root = createRoot(container);\nroot.render(<App />);\n","import React, { useState, useEffect } from 'react';\nimport SerialManager, { browserHasSerial, getPanelSettings, PanelSettings, requestConnection } from './util/serial';\n\nexport default function App() {\n    const [loading, setLoading] = useState(true);\n    const [panelSettings, setPanelSettings] = useState<PanelSettings | undefined>(undefined);\n    const [serialManager, setSerialManager] = useState<SerialManager>(new SerialManager());\n\n    useEffect(() => {\n        if (!browserHasSerial()) {\n            setLoading(false);\n            return;\n        }\n        // requestConnection().then(port => {\n        //     setSerialPort(port);\n        //     setLoading(false);\n        // });\n    }, []);\n\n    const updateSettings = (data: string) => {\n        const dataArr = data.split(' ');\n        if (dataArr.length !== 10) return;\n        setPanelSettings({\n            panelCount: parseInt(dataArr[1]),\n            sensorCount: parseInt(dataArr[3]),\n            maxPanels: parseInt(dataArr[5]),\n            maxSensors: parseInt(dataArr[7]),\n            buttonLimit: parseInt(dataArr[9]),\n        });\n    };\n\n    if (loading) {\n        return (\n            <button onClick={() => {\n                serialManager.init().then(() => {\n                    serialManager.connect().then((result) => {\n                        setLoading(false);\n                    });\n                });\n            }}>\n                Connect to device\n            </button>\n        );\n    }\n\n    return (\n        <div>\n            {/* <h1>{serialPort.getInfo().usbVendorId}</h1>\n            <h1>{serialPort.getInfo().usbProductId}</h1> */}\n            {/* <button onClick={() => getPanelSettings(serialPort).then(setPanelSettings)}>Log settings</button> */}\n            <button onClick={() => console.log(serialManager.write(\"s\"))}>Log settings</button>\n            <p>{`${JSON.stringify(panelSettings)}`}</p>\n            <tbody>\n                {[...Array(panelSettings?.panelCount)].map((x, i) => <button onClick={() => serialManager.write(`p ${i}`)}>panel {i}</button>)}\n            </tbody>\n        </div>\n    );\n};\n","\nconst browserHasSerial = (): boolean => \"serial\" in navigator;\n\nexport type PanelSettings = {\n    panelCount: number,\n    sensorCount: number,\n    maxPanels: number,\n    maxSensors: number,\n    buttonLimit: number\n};\n\nconst requestConnection = async (): Promise<SerialPort | undefined > => {\n    if (!browserHasSerial()) return;\n    const filters = [\n        { usbVendorId: 0x2341, usbDeviceId: 0x8037 }\n    ];\n    const port = await navigator.serial.requestPort({ filters });\n    await port.open({ baudRate: 115200 });\n    await port.setSignals({ requestToSend: false });\n    return port;\n}\n\nconst getPanelSettings = async (port: SerialPort): Promise<PanelSettings | undefined> => {\n    console.log(\"Checking readability state\");\n    if (!port.readable || port.readable.locked) return undefined;\n    console.log(\"Creating reader\");\n    const reader = port.readable.getReader();\n    console.log(\"Writing command\");\n    if (!(await writeToPort(port, 's'))) return undefined;\n    console.log(\"Reading from reader\");\n    const data = await readFromReader(reader);\n    const dataArr = data.split(' ');\n    if (dataArr.length !== 10) return undefined;\n    return {\n        panelCount: parseInt(dataArr[1]),\n        sensorCount: parseInt(dataArr[3]),\n        maxPanels: parseInt(dataArr[5]),\n        maxSensors: parseInt(dataArr[7]),\n        buttonLimit: parseInt(dataArr[9]),\n    };\n\n    return undefined;\n}\n\nconst setPanels = async (port: SerialPort, panelCount: number, sensorCount: number): Promise<boolean> => {\n    return writeToPort(port, `n ${panelCount} ${sensorCount}`);\n}\n\nconst writeToPort = async (port: SerialPort, data: string): Promise<boolean> => {\n    const textEncoder = new TextEncoderStream();\n\n    const writable = port.writable;\n    if (!writable || writable.locked) return false;\n\n    textEncoder.readable.pipeTo(writable);\n    const writer = textEncoder.writable.getWriter();\n\n    await writer.write(data);\n    writer.releaseLock();\n    return true;\n}\n\nconst readFromReader = async (reader: ReadableStreamDefaultReader<Uint8Array>): Promise<string> => {\n    let data = \"\";\n    const dataEndFlag = new Uint8Array([4, 3]);\n    while (true) {\n        const { value, done } = await reader.read();\n        if (value) {\n            data += new TextDecoder().decode(value);\n        }\n        if (done || value.slice(-2).every((val, idx) => val === dataEndFlag[idx])) {\n            reader.releaseLock()\n            break;\n        }\n        console.log(value.slice(-2));\n    };\n    return data;\n}\n\n// const readFromPort = async (port: SerialPort): Promise<string> => {\n//     if (!port.readable || port.readable.locked) return \"\";\n//     const reader = port.readable.getReader();\n//     let data = \"\";\n//     do {\n//         const { value, done } = await reader.read();\n//         console.log(data);\n//         if (done) {\n//             reader.releaseLock()\n//         } else if (value) {\n//             data += value;\n//         }\n//     } while (port.readable.locked);\n//     return data;\n// }\n\nexport {\n    browserHasSerial,\n    requestConnection,\n    setPanels,\n    getPanelSettings\n};\n\nexport type SerialEventCallback = (data: string) => void;\n\nclass PadSerialManager {\n    private port?: SerialPort;\n    private writer?: WritableStreamDefaultWriter<string>;\n    private textEncoderStream: TextEncoderStream;\n    private reader:  ReadableStreamDefaultReader<Uint8Array> | undefined;\n\n    private actions: Array<SerialEventCallback>;\n\n    constructor() {\n        this.textEncoderStream = new TextEncoderStream();\n        this.actions = [];\n    }\n\n    public isAvailable = (): boolean => !!this.port;\n\n    public start = async (): Promise<boolean> => {\n        if (!browserHasSerial()) return false;\n        const filters = [\n            { usbVendorId: 0x2341, usbDeviceId: 0x8037 }\n        ];\n        try {\n            this.port = await navigator.serial.requestPort({ filters });\n            await this.port.open({ baudRate: 115200 });\n        } catch {\n            return false;\n        }\n        return this.createWriter() && this.createReader();\n    }\n\n    public stop = () => {\n        this.port?.readable?.cancel();\n        this.getWriter()?.close();\n    }\n\n    public do = (request: string, callback: SerialEventCallback): boolean => {\n        if (!this.getReader()) return false;\n        this.actions.push(callback);\n        this.write(request);\n        // this.read();\n        return true;\n    }\n\n    private createWriter = (): boolean => {\n        if (!this.port?.writable || this.port?.writable?.locked) return false;\n    \n        this.textEncoderStream.readable.pipeTo(this.port?.writable);\n        this.writer = this.textEncoderStream?.writable?.getWriter();\n        return true;\n    }\n\n    private getWriter = (): WritableStreamDefaultWriter<string> | undefined => this.writer;\n\n    private createReader = (): boolean => {\n        this.reader = this.port?.readable?.getReader();\n        this.startReader();\n        return !!this.reader;\n    }\n\n    private getReader = (): ReadableStreamDefaultReader<Uint8Array> | undefined => this.reader;\n\n    private startReader = async () => {\n        let data: Uint8Array = new Uint8Array([]);\n        const dataEndFlag = new Uint8Array([4, 3]);\n        while (this.port?.readable?.locked) {\n            const { value, done } = await this.getReader()!.read();\n            console.log(\"got some data\");\n            if (value) {\n                data = Uint8Array.of(...data, ...value);\n            }\n            if (done || value.slice(-2).every((val, idx) => val === dataEndFlag[idx])) {\n                console.log(data);\n                const action = this.actions.shift();\n                action && action(new TextDecoder().decode(data));\n                data = new Uint8Array([]);\n            }\n        };\n    }\n\n    // private read = async (): void => {``\n    //     console.log(\"start read\");\n    //     if (!this.getReader()) return;\n    //     let data: Uint8Array = new Uint8Array([]);\n    //     const dataEndFlag = new Uint8Array([4, 3]);\n    //     console.log(\"setup\");\n    //     while (true) {\n    //         const { value, done } = await this.getReader()!.read();\n    //         console.log(\"got some data\");\n    //         if (value) {\n    //             data = Uint8Array.of(...data, ...value);\n    //         }\n    //         if (done || value.slice(-2).every((val, idx) => val === dataEndFlag[idx])) {\n    //             console.log(\"done\");\n    //             break;\n    //         }\n    //     };\n    //     console.log(data);\n    //     const action = this.actions.shift();\n    //     action && action(new TextDecoder().decode(data));\n    // }\n\n    private write = async (data: string) => { \n        if (!this.getWriter()) return;\n        return this.getWriter()!.write(data).then(() => {\n\n        console.log(\"done writing\")\n            // this.getWriter()!.releaseLock();\n            // this.writer?.releaseLock();\n        });\n    }\n}\n\n\nclass PadSerialManager2 {\n    private encoder = new TextEncoder();\n    private decoder = new TextDecoder();\n\n    private port?: SerialPort;\n    private open: boolean = false;\n\n    private messages: Array<string> = [];\n\n    constructor() {\n\n    }\n\n    public init = async (): Promise<boolean> => {\n        if (!navigator.serial) return false;\n\n        const filters = [\n            { usbVendorId: 0x2341, usbDeviceId: 0x8037 }\n        ];\n        try {\n            this.port = await navigator.serial.requestPort({ filters });\n        } catch {\n            return false;\n        }\n        return true;\n    }\n\n    public connect = async () => {\n        if (!this.port) return;\n        try {\n            await this.port.open({ baudRate: 115200, bufferSize: 255, dataBits: 8, flowControl: 'none', parity: 'none', stopBits: 1 })\n            this.open = true;\n            this.monitor();\n        } catch {\n\n        }\n    }\n\n    private monitor = async () => {\n        const dataEndFlag = new Uint8Array([4, 3]);\n        while (this.open && this.port?.readable) {\n            this.open = true;\n            const reader = this.port.readable.getReader();\n            try {\n                let data: Uint8Array = new Uint8Array([]);\n                while (this.open) {\n                    console.log(\"monitoring\");\n                    const { value, done } = await reader.read();\n                    console.log(\"read\");\n                    if (done) {\n                        this.open = false;\n                        break;\n                    }\n                    if (value) {\n                        data = Uint8Array.of(...data, ...value);\n                    }\n                    if (data.slice(-2).every((val, idx) => val === dataEndFlag[idx])) {\n                        const decoded = this.decoder.decode(data);\n                        console.log(decoded);\n                        this.messages.push(decoded);\n                        data = new Uint8Array([]);\n                    }\n                }\n                console.log(\"stopped monitoring\");\n            } catch {\n                console.log(\"fatal?\");\n\n            }\n        }\n    }\n\n    public write = async (data: string) => {\n        if (this.port?.writable) {\n            console.log(\"start write\");\n            const writer = this.port.writable.getWriter();\n            await writer.write(this.encoder.encode(data));\n            writer.releaseLock();\n            console.log(\"finish write\");\n        }\n    }\n\n    public close = async () => {\n        await this.port?.readable?.cancel();\n        await this.port?.close();\n    }\n}\n\nexport default PadSerialManager2;"],"names":[],"version":3,"file":"index.js.map"}